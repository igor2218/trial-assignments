// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$ico-delivery-name: 'ico-delivery';
$ico-delivery-x: 0px;
$ico-delivery-y: 0px;
$ico-delivery-offset-x: 0px;
$ico-delivery-offset-y: 0px;
$ico-delivery-width: 17px;
$ico-delivery-height: 13px;
$ico-delivery-total-width: 37px;
$ico-delivery-total-height: 23px;
$ico-delivery-image: '/img/sprite.png';
$ico-delivery: (0px, 0px, 0px, 0px, 17px, 13px, 37px, 23px, '/img/sprite.png', 'ico-delivery', );
$ico-fb-name: 'ico-fb';
$ico-fb-x: 30px;
$ico-fb-y: 10px;
$ico-fb-offset-x: -30px;
$ico-fb-offset-y: -10px;
$ico-fb-width: 5px;
$ico-fb-height: 12px;
$ico-fb-total-width: 37px;
$ico-fb-total-height: 23px;
$ico-fb-image: '/img/sprite.png';
$ico-fb: (30px, 10px, -30px, -10px, 5px, 12px, 37px, 23px, '/img/sprite.png', 'ico-fb', );
$ico-google-name: 'ico-google';
$ico-google-x: 17px;
$ico-google-y: 0px;
$ico-google-offset-x: -17px;
$ico-google-offset-y: 0px;
$ico-google-width: 13px;
$ico-google-height: 11px;
$ico-google-total-width: 37px;
$ico-google-total-height: 23px;
$ico-google-image: '/img/sprite.png';
$ico-google: (17px, 0px, -17px, 0px, 13px, 11px, 37px, 23px, '/img/sprite.png', 'ico-google', );
$ico-stock-name: 'ico-stock';
$ico-stock-x: 0px;
$ico-stock-y: 13px;
$ico-stock-offset-x: 0px;
$ico-stock-offset-y: -13px;
$ico-stock-width: 14px;
$ico-stock-height: 10px;
$ico-stock-total-width: 37px;
$ico-stock-total-height: 23px;
$ico-stock-image: '/img/sprite.png';
$ico-stock: (0px, 13px, 0px, -13px, 14px, 10px, 37px, 23px, '/img/sprite.png', 'ico-stock', );
$ico-twitter-name: 'ico-twitter';
$ico-twitter-x: 14px;
$ico-twitter-y: 13px;
$ico-twitter-offset-x: -14px;
$ico-twitter-offset-y: -13px;
$ico-twitter-width: 11px;
$ico-twitter-height: 10px;
$ico-twitter-total-width: 37px;
$ico-twitter-total-height: 23px;
$ico-twitter-image: '/img/sprite.png';
$ico-twitter: (14px, 13px, -14px, -13px, 11px, 10px, 37px, 23px, '/img/sprite.png', 'ico-twitter', );
$ico-vk-name: 'ico-vk';
$ico-vk-x: 30px;
$ico-vk-y: 0px;
$ico-vk-offset-x: -30px;
$ico-vk-offset-y: 0px;
$ico-vk-width: 7px;
$ico-vk-height: 10px;
$ico-vk-total-width: 37px;
$ico-vk-total-height: 23px;
$ico-vk-image: '/img/sprite.png';
$ico-vk: (30px, 0px, -30px, 0px, 7px, 10px, 37px, 23px, '/img/sprite.png', 'ico-vk', );
$spritesheet-width: 37px;
$spritesheet-height: 23px;
$spritesheet-image: '/img/sprite.png';
$spritesheet-sprites: ($ico-delivery, $ico-fb, $ico-google, $ico-stock, $ico-twitter, $ico-vk, );
$spritesheet: (37px, 23px, '/img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
